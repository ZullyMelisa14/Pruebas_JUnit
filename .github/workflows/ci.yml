name: Taller automatización CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    # Este job se llamará 'Linting con Checkstyle' en la interfaz de GitHub Actions
    name: Linting con Checkstyle
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout: Clona el código del repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configurar Java: Instala la versión de Java especificada (ej. 17)
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"

          # Instalar Maven
      - name: Install Maven
        run: |
          # El comando 'apt-get' instala el paquete Maven en el runner de Ubuntu
          sudo apt-get update
          sudo apt-get install maven -y

      - name: Run Checkstyle linter
        run: |
          echo "Ejecutando Checkstyle a través de Maven..."
          # El goal 'validate' de Maven ejecuta los plugins configurados en la fase de validación.
          # Asume que el plugin checkstyle está correctamente configurado en tu pom.xml para fallar la construcción.
          mvn --batch-mode validate

  test_coverage:
    name: Tests con Coverage
    runs-on: ubuntu-latest

    # Coverage requqerido
    env:
      REQUIRED_COVERAGE: 77

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"

      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install maven -y

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run tests with coverage
        run: mvn clean test jacoco:report

      - name: Enforce coverage >= 90%
        run: |
          MISSED=$(grep -oP '<counter type="LINE" missed="\K[0-9]+' target/site/jacoco/jacoco.xml | awk '{s+=$1} END {print s}')
          COVERED=$(grep -oP '<counter type="LINE" missed="[0-9]+" covered="\K[0-9]+' target/site/jacoco/jacoco.xml | awk '{s+=$1} END {print s}')
          TOTAL=$((MISSED + COVERED))

          if [ "$TOTAL" -eq 0 ]; then
            echo "⚠️ No se pudo calcular coverage (TOTAL=0)."
            exit 1
          fi

          COVERAGE=$((COVERED * 100 / TOTAL))

          echo "📊 Coverage Report"
          echo "----------------------"
          echo "Lines covered:   $COVERED"
          echo "Lines missed:    $MISSED"
          echo "Total lines:     $TOTAL"
          echo "Coverage:        $COVERAGE%"
          echo "----------------------"

          if [ "$COVERAGE" -lt 75 ]; then
            echo "❌ Coverage below 90%!"
            exit 1
          else
            echo "✅ Coverage is acceptable."
          fi

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install maven -y

      - name: Cache Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build package
        run: mvn clean package -DskipTests

      - name: Upload build artifact (GitHub)
        if: ${{ env.ACT != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-package
          path: target/*.jar

      - name: Save artifact locally (act)
        if: ${{ env.ACT == 'true' }}
        run: |
          mkdir -p build
          cp target/*.jar build/
          echo "📦 Package saved locally in build/"

  docker:
    runs-on: ubuntu-latest
    needs: [lint, test_coverage, build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install maven -y

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Build Docker image
        run: docker build -t miapp .

      - name: Run container for validation
        run: |
          docker run --rm miapp

      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/miapp .

      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/myapp
          docker tag myapp $IMAGE
          docker push $IMAGE

  super_linter:
    name: Lint
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # super-linter needs the full git history to get the
          # list of files that changed across commits
          fetch-depth: 0
          persist-credentials: false

      - name: Super-linter
        uses: super-linter/super-linter@v8.2.0 # x-release-please-version
        env:
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  fix-lint-issues:
    permissions:
      # To write linting fixes
      contents: write
      # To write Super-linter status checks
      statuses: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Super-Linter
        uses: super-linter/super-linter@v8.2.0 # x-release-please-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Set your fix mode variables to true
          FIX_SHELL_SHFMT: true
          FIX_YAML_PRETTIER: true
          # To reuse the same Super-linter configuration that you use in the
          # lint job without duplicating it, see
          # https://github.com/super-linter/super-linter/blob/main/docs/run-linter-locally.md#share-environment-variables-between-environments
      - name: Commit and push linting fixes
        # Run only on:
        # - Pull requests
        # - Not on the default branch
        if: >
          github.event_name == 'pull_request' &&
          github.ref_name != github.event.repository.default_branch
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }}
          commit_message: "chore: fix linting issues"
          commit_user_name: super-linter
          commit_user_email: super-linter@super-linter.dev
